name: Deploy website to GitHub Pages

on:
  push:
    branches: [ main ]
    paths:
      - '**'
  workflow_dispatch:
    inputs:
      visibility:
        description: 'Site visibility (private keeps noindex & Disallow; public adds sitemap & allows indexing)'
        required: true
        default: 'private'
        type: choice
        options: [ 'private', 'public' ]

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

env:
  SITE_VISIBILITY: ${{ github.event_name == 'workflow_dispatch' && inputs.visibility || 'private' }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      mode: ${{ steps.pages_mode.outputs.mode }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: CI context debug (early)
        continue-on-error: true
        run: |
          mkdir -p ci-debug
          echo "GITHUB_REF=$GITHUB_REF" > ci-debug/context.txt
          echo "GITHUB_SHA=$GITHUB_SHA" >> ci-debug/context.txt
          echo "GITHUB_EVENT_NAME=$GITHUB_EVENT_NAME" >> ci-debug/context.txt
          echo "Actor=$GITHUB_ACTOR" >> ci-debug/context.txt
          echo "Runner OS=$RUNNER_OS" >> ci-debug/context.txt
          echo "Repo=$GITHUB_REPOSITORY" >> ci-debug/context.txt
      - name: Upload CI debug (early)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-debug-early
          path: ci-debug

      - name: Detect Pages mode (Actions vs branch)
        id: pages_mode
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -e
          mkdir -p ci-debug
          RESP=$(curl -fsS -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/pages" || true)
          printf "%s" "$RESP" > ci-debug/pages.json || true
          MODE="unknown"
          if echo "$RESP" | grep -q '"source"'; then
            if echo "$RESP" | grep -q '"branch"[[:space:]]*:[[:space:]]*"gh-pages"'; then
              MODE="branch"
            else
              MODE="actions"
            fi
          fi
          echo "Detected Pages mode: $MODE"
          echo "mode=$MODE" >> "$GITHUB_OUTPUT"

      - name: Setup Python for tooling
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install OG renderer
        run: |
          python -m pip install --upgrade pip
          pip install cairosvg

      - name: Ensure script permissions
        run: |
          chmod +x scripts/seo/toggle-robots.sh scripts/og/render.sh scripts/evidence/snapshot.sh scripts/ops/guard_dns_ssl.sh || true

      - name: Set site visibility (private/public)
        run: |
          echo "SITE_VISIBILITY=${SITE_VISIBILITY}"
          python3 scripts/seo/set-indexing.py "${SITE_VISIBILITY}"
          scripts/seo/toggle-robots.sh "${SITE_VISIBILITY}"

      - name: Generate sitemap (public only)
        if: env.SITE_VISIBILITY == 'public'
        run: python3 scripts/seo/gen-sitemap.py

      - name: Render OpenGraph PNG from SVG
        run: scripts/og/render.sh

      - name: Install Chrome (for PDF render)
        uses: browser-actions/setup-chrome@v1

      - name: Render Whitepaper PDF (deploy artifact)
        continue-on-error: true
        run: |
          HTML="${{ github.workspace }}/fl-bsa/whitepaper/index.html"
          OUT="${{ github.workspace }}/fl-bsa/whitepaper/Equilens_FL-BSA_Whitepaper_v1.pdf"
          echo "Rendering $HTML -> $OUT"
          google-chrome --headless=new --no-sandbox --disable-gpu \
            --print-to-pdf="$OUT" "file://$HTML"
          ls -lh "$OUT"

      - name: Prepare deploy artifact
        run: |
          chmod +x scripts/deploy/prepare.sh
          scripts/deploy/prepare.sh

      - name: Debug dist tree
        run: |
          echo "Working dir: $(pwd)"
          du -sh dist || true
          echo "Sample dist file list:" && find dist -maxdepth 3 -type f | sort | sed -n '1,200p'
          echo "Whitepaper PDF (if present):" && ls -lh dist/fl-bsa/whitepaper/*.pdf 2>/dev/null || true

      - name: Upload dist debug artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-debug
          path: dist

      - name: Guard no vendor demo pages
        run: |
          set -e
          MAP=$(find dist -type f -name '*.html' -print0 | xargs -0 -I{} sh -c "grep -nE '(^|/)(themes/appline/.*\\.html|template/appline-.*\\.html)' '{}' || true")
          if [ -n "$MAP" ]; then
            echo "::error file=dist::Vendor HTML detected in deploy artifact"
            echo "$MAP"
            exit 1
          fi

      - name: Guard DNS/TLS for custom domain
        run: |
          if [ -f CNAME ]; then
            DOMAIN=$(cat CNAME | tr -d '\n' | tr -d '\r')
            echo "Checking DNS/TLS for $DOMAIN and www.$DOMAIN"
            scripts/ops/guard_dns_ssl.sh "$DOMAIN" "www.$DOMAIN"
          else
            echo "No CNAME present; skipping DNS/TLS guard"
          fi

      - name: Evidence snapshot
        run: scripts/evidence/snapshot.sh "SITE-DEPLOY"

      - name: Configure Pages
        if: steps.pages_mode.outputs.mode != 'branch'
        uses: actions/configure-pages@v5
        with:
          enablement: true

      - name: Upload artifact
        if: steps.pages_mode.outputs.mode != 'branch'
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    if: needs.build.outputs.mode != 'branch'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  publish_gh_pages:
    name: Publish to gh-pages (branch mode)
    if: needs.build.outputs.mode == 'branch'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Prepare dist (ensure present)
        run: |
          chmod +x scripts/deploy/prepare.sh
          scripts/deploy/prepare.sh
      - name: Publish to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: dist
          publish_branch: gh-pages
          keep_files: false
